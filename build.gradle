plugins {
    id 'org.ajoberstar.grgit' version '2.3.0' apply false
}

import org.ajoberstar.grgit.Grgit

repositories {
    jcenter()
}

task getCodeFormatScripts {
    description "Obtain the run-google-java-format scripts"
    doLast {
        if (!new File("$projectDir/.run-google-java-format").exists()) {
            def rgjfGit = Grgit.clone(dir: "$projectDir/.run-google-java-format", uri: 'https://github.com/plume-lib/run-google-java-format.git')
        } else {
            def rgjfGit = Grgit.open(dir: "$projectDir/.run-google-java-format")
            rgjfGit.pull()
        }
    }
}

task pythonIsInstalled(type: Exec) {
    description "Check that the python executable is installed."
    executable = "python"
    args "--version"
}

task checkFormat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
    description "Check whether the Java source code is properly formatted"
    def javaFiles = fileTree("$projectDir").matching { include "**/*.java" } as List
    def pythonArgs = javaFiles.clone()
    pythonArgs.add(0, "$projectDir/.run-google-java-format/check-google-java-format.py")

    commandLine "python"
    args pythonArgs
    ignoreExitValue true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("Found improper formatting, try running:  ./gradlew reformat")
        }
    }
}

task reformat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
    description "Format the Java source code according to the Google Java Format style"
    def javaFiles = fileTree("$projectDir").matching { include "**/*.java" } as List
    def pythonArgs = javaFiles.clone()
    pythonArgs.add(0, "$projectDir/.run-google-java-format/run-google-java-format.py")

    commandLine "python"
    args pythonArgs
}